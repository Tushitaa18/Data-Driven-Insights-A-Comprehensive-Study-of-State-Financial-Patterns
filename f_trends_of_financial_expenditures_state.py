# -*- coding: utf-8 -*-
"""F Trends of Financial Expenditures State.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yTaMUJUvE-qYq1zr5q5glSGeyStTAO7S
"""

!pip install sweetviz

import geopandas as gpd
from google.colab import drive

import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sweetviz as sv

drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/Tax Collection.csv'
try:

    df = pd.read_csv(file_path)
    print("File loaded successfully.")
except Exception as e:
    print(f"An error occurred: {e}")

file_path = '/content/drive/MyDrive/Revenue Expenditure.csv'
try:

    df2 = pd.read_csv(file_path)
    print("File loaded successfully.")
except Exception as e:
    print(f"An error occurred: {e}")

# Set pandas display options to show all columns
pd.set_option('display.max_columns', None)

df.head()

# Assuming the dataframe is loaded into 'df'
df['Tax income %'] = (df['Tax revenue'] / df['Total revenue']) * 100

# Display the dataframe to check the result
print(df[['srcStateName', 'srcYear', 'Total revenue', 'Tax revenue', 'Tax income %']].head())

import pandas as pd

# Assuming the dataframe is loaded into 'df'
df['State own tax %'] = (df['State own tax revenue '] / df['Total revenue']) * 100

# Display the dataframe to check the result
print(df[['srcStateName', 'srcYear', 'Total revenue', 'State own tax revenue ', 'State own tax %']].head())



import seaborn as sns

# Sort data by percentage for better visualization
df_sorted = df.sort_values(by='State own tax %', ascending=False)

# Create a barplot using seaborn
plt.figure(figsize=(10, 6))
sns.barplot(x='srcStateName', y='State own tax %', data=df_sorted, palette='pastel')

# Add labels and title
plt.xlabel('State/UT', fontsize=12)
plt.ylabel('State Own Tax %', fontsize=12)
plt.title('State Own Tax Contribution as % of Total Revenue', fontsize=14)
plt.xticks(rotation=90)  # Rotate state names for readability

# Show the plot
plt.tight_layout()
plt.show()

# Drop any rows where 'State own tax %' might be NaN or zero to avoid empty slices
df_nonzero = df[df['State own tax %'] > 0]

# Create the pie chart
plt.figure(figsize=(8, 8))
plt.pie(df_nonzero['State own tax %'], labels=df_nonzero['srcStateName'], autopct='%1.1f%%', startangle=140, colors=plt.cm.Pastel1.colors)

# Add a title
plt.title('State Own Tax Revenue as % of Total Revenue', fontsize=14)

# Show the plot
plt.show()

# Filter the dataset for 'Budget Estimates' and the specified YearCode
filtered_df = df[(df['Budget type'] == 'Accounts') & (df['YearCode'] == 2017)]

import matplotlib.pyplot as plt

# Sort data by percentage for better visualization
filtered_df_sorted = filtered_df.sort_values(by='State own tax %', ascending=False)

# Create the bar plot
plt.figure(figsize=(10, 6))
plt.bar(filtered_df_sorted['srcStateName'], filtered_df_sorted['State own tax %'], color='lightblue')

# Add labels and title
plt.xlabel('State/UT', fontsize=12)
plt.ylabel('State Own Tax %', fontsize=12)
plt.title('State Own Tax Contribution as % of Total Revenue (Accounts, 2017)', fontsize=14)
plt.xticks(rotation=90)  # Rotate state names for readability


# Show the plot
plt.tight_layout()
plt.show()

# Drop any rows where 'State own tax %' might be NaN or zero to avoid empty slices
filtered_df_nonzero = filtered_df[filtered_df['State own tax %'] > 0]

# Create the pie chart
plt.figure(figsize=(8, 8))
plt.pie(filtered_df_nonzero['State own tax %'], labels=filtered_df_nonzero['srcStateName'], autopct='%1.1f%%', startangle=140, colors=plt.cm.Pastel1.colors)

# Add a title
plt.title('State Own Tax Revenue as % of Total Revenue (Accounts, 2017)', fontsize=14)

# Show the plot
plt.show()

import seaborn as sns

# Sort data by percentage for better visualization
filtered_df_sorted = filtered_df.sort_values(by='State own tax %', ascending=False)

# Create a barplot using seaborn
plt.figure(figsize=(10, 6))
sns.barplot(x='srcStateName', y='State own tax %', data=filtered_df_sorted, palette='pastel')

# Add labels and title
plt.xlabel('State/UT', fontsize=12)
plt.ylabel('State Own Tax %', fontsize=12)
plt.title('State Own Tax Contribution as % of Total Revenue (Accounts, 2017)', fontsize=14)
plt.xticks(rotation=90)  # Rotate state names for readability

# Show the plot
plt.tight_layout()
plt.show()

import pandas as pd

# Load the population data from the provided image manually (since it's in an image format and cannot be directly read by code)
# Simulated input based on the Census data provided above:
data = {
    "State/UT": [
        "India", "Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", "Goa", "Gujarat", "Haryana",
        "Himachal Pradesh", "Jammu & Kashmir", "Jharkhand", "Karnataka", "Kerala", "Madhya Pradesh", "Maharashtra",
        "Manipur", "Meghalaya", "Mizoram", "Nagaland", "Odisha", "Punjab", "Rajasthan", "Sikkim", "Tamil Nadu",
        "Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal", "A.& N. Islands", "Chandigarh", "D.& N. Haveli",
        "Daman & Diu", "Delhi", "Lakshadweep", "Puducherry"
    ],
    "Population": [
        1210854977, 84580777, 1383727, 31205576, 104099452, 25545198, 1458545, 60439692, 25351462,
        6864602, 12541302, 32988134, 61095297, 33406061, 72626809, 112374333, 2855794, 2966889,
        1097206, 1978502, 41974218, 27743338, 68548437, 610577, 72147030, 3673917, 199812341,
        10086292, 91276115, 380581, 1055450, 343709, 243247, 16787941, 64473, 1247953
    ]
}

# Convert this data into a DataFrame
population_df = pd.DataFrame(data)

# Display the DataFrame to verify data
population_df.head()

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming `filtered_df` contains the merged and filtered data for plotting

# Sort data by percentage for better visualization
filtered_df_sorted = filtered_df.sort_values(by='State own tax %', ascending=False)

# Create a barplot using seaborn
plt.figure(figsize=(10, 6))
sns.barplot(x='srcStateName', y='State own tax %', data=filtered_df_sorted, palette='pastel')

# Add labels and title
plt.xlabel('State/UT', fontsize=12)
plt.ylabel('State Own Tax %', fontsize=12)
plt.title('State Own Tax Contribution as % of Total Revenue (Accounts, 2017)', fontsize=14)
plt.xticks(rotation=90)  # Rotate state names for readability

# Show the plot
plt.tight_layout()
plt.show()

df.head()

df2.head()

df2.shape

df2.isnull().sum()

# Strip any leading/trailing spaces from column names
df2.columns = df2.columns.str.strip()

# Now, re-run the code to create a unique stateID for each state
state_id_map = {state: idx for idx, state in enumerate(df2['srcStateName'].unique(), start=1)}

# Add the stateID column
df2['stateID'] = df2['srcStateName'].map(state_id_map)

# Verify
df2[['srcStateName', 'stateID']].head()

# Sort the dataframe by 'stateID' and 'Year' in ascending order and update df2
df2.sort_values(by=['stateID', 'Year'], ascending=True, inplace=True)

# Save the updated df2 to a CSV file
df2.to_csv('sorted_revenue_expenditure.csv', index=False)

# Optionally, display the first few rows of the sorted dataframe
df2.head()

# Reorder 'Year' and 'stateID' to be the first two columns
cols = ['stateID','YearCode'] + [col for col in df2.columns if col not in ['stateID','YearCode']]

# Update df2 with the new column order
df2 = df2[cols]

# Optionally, display the first few rows of the updated dataframe
df2.head()

df2.head()

# Select only the numerical columns you want to include in the correlogram
# Replace 'Total expenditure', 'Developmental expenditure', etc., with your desired columns
selected_columns = ['Total expenditure', 'Developmental expenditure', 'Social services',
                    'Education, sports, art and culture', 'Medical and public health']

# Filter the DataFrame
df_filtered = df2[selected_columns]

# Drop rows with any null values to avoid errors during correlation calculation
df_filtered = df_filtered.dropna()

# Calculate the correlation matrix
corr = df_filtered.corr()

# Set up the matplotlib figure
plt.figure(figsize=(10, 8))

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, annot=True, fmt=".2f", cmap='coolwarm', square=True, cbar_kws={"shrink": .8})

# Set title
plt.title('Correlogram of Selected Fields', fontsize=16)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Create a scatter plot of Total expenditure vs. Total expenditure
plt.figure(figsize=(8, 6))
plt.scatter(df2['Total expenditure'], df2['Developmental expenditure'], c=df2['stateID'], cmap='viridis', alpha=0.7)
plt.colorbar(label='State ID')

# Set title and labels
plt.title('Scatter Plot of Total Expenditure vs Developmental expenditure', fontsize=16)
plt.xlabel('Total Expenditure', fontsize=14)
plt.ylabel('Developmental expenditure', fontsize=14)

# Set equal aspect ratio for clarity
plt.axis('equal')

# Show grid
plt.grid()

# Show the plot
plt.show()

import json
import numpy as np
import pandas as pd
import plotly.express as px

import plotly.io as pio
pio.renderers.default = ''

# Install geopandas if you haven't already
!pip install geopandas

# Import necessary libraries
import geopandas as gpd
from google.colab import drive


# Define the path to the GeoJSON file in Google Drive
geojson_file_path = '/content/drive/MyDrive/states_india.geojson'

# Load the GeoJSON file
india_states = gpd.read_file(geojson_file_path)

# Display the data
print(india_states.head())

with open(geojson_file_path, "r") as file:
    india_states = json.load(file)

# Display the loaded data
print(india_states)

state_id_map = {}
for feature in india_states["features"]:
    feature["id"] = feature["properties"]["state_code"]
    state_id_map[feature["properties"]["st_nm"]] = feature["id"]

# Load the GeoJSON file (assuming it's already loaded into india_states)

# Initialize the state_id_map
state_id_map = {}
for feature in india_states["features"]:
    feature["id"] = feature["properties"]["state_code"]
    # Convert the name of the state/UT to uppercase
    state_name = feature["properties"]["st_nm"].upper()
    state_id_map[state_name] = feature["id"]

# # Assuming your DataFrame is df2 and the column name is 'srcStateName'

# # Create a dictionary of the old and new names to replace in the dataset
# state_replacements = {
#     'NATIONAL CAPITAL TERRITORY OF DELHI (DELHI)': 'NCT OF DELHI',
#     'ARUNACHAL PRADESH': 'ARUNANCHAL PRADESH',
#     'JAMMU AND KASHMIR': 'JAMMU & KASHMIR',
#     'DELHI': 'NCT OF DELHI'
# }

# # Use the replace() method to update the names in the 'srcStateName' column
# df2['srcStateName'] = df2['srcStateName'].replace(state_replacements)


# # Display the updated DataFrame
# print(df2['srcStateName'].unique())

state_id_map['NATIONAL CAPITAL TERRITORY OF DELHI'] = state_id_map.pop('NCT OF DELHI')
# Add a new state to the state_id_map
# Correct the misspelled state in state_id_map
state_id_map['ARUNACHAL PRADESH'] = state_id_map.pop('ARUNANCHAL PRADESH')
# Correct the misspelled state in state_id_map
state_id_map['JAMMU AND KASHMIR'] = state_id_map.pop('JAMMU & KASHMIR')

new_state = "DELHI"
new_state_id = 36

# Adding the new state and its ID to the dictionary
state_id_map[new_state.upper()] = new_state_id

# Display the updated state_id_map
print(state_id_map)

state_id_map

# Apply the state_id_map by first converting the state names in df2["srcStateName"] to uppercase
df2["id"] = df2["srcStateName"].apply(lambda x: state_id_map[x.upper()])

"""##K mean Clustering

"""



df2['YearCode'] = pd.to_datetime(df2['YearCode'], format='%Y')

sns.set(style="whitegrid")

df2_filtered = df2[df2['Budget type'] == 'Budget Estimates']

grouped = df2_filtered.groupby(['YearCode', 'srcStateName', 'stateID']).agg({
    'Total expenditure': 'mean',
    'Developmental expenditure': 'mean',
    'Non developmental expenditure': 'mean',
    'Social services': 'mean',
    'Economic services': 'mean'
}).reset_index()

if grouped['srcStateName'].nunique() > 0:

    plt.figure(figsize=(12, 8))
    sns.lineplot(data=grouped, x='YearCode', y='Total expenditure', hue='srcStateName', marker='o', legend='full')
    plt.title('Total Expenditure Over Time by State (Filtered by Budget Type)')
    plt.xlabel('Year')
    plt.ylabel('Total Expenditure')
    plt.xticks(rotation=45)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', title='State')
    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(12, 8))
    sns.lineplot(data=grouped, x='YearCode', y='Developmental expenditure', hue='srcStateName', marker='o', legend='full')
    plt.title('Developmental Expenditure Over Time by State (Filtered by Budget Type)')
    plt.xlabel('Year')
    plt.ylabel('Developmental Expenditure')
    plt.xticks(rotation=45)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', title='State')
    plt.tight_layout()
    plt.show()

else:
    print("No distinct values in 'srcStateName' to generate legends.")

df2.head()

import pandas as pd

# Assuming you have loaded your dataset into a DataFrame called df
# Example columns: Total expenditure, Developmental expenditure

# Calculate the percentage of total expenditure allocated to developmental expenditure
df2['development %'] = (df2['Developmental expenditure'] / df2['Total expenditure']) * 100

# Assuming you have loaded your dataset into a DataFrame called df
# Example columns: Total expenditure, Developmental expenditure

# Calculate the percentage of total expenditure allocated to developmental expenditure
df2['social dev %'] = (df2['Social services'] / df2['Total expenditure']) * 100

financial_columns = [
    'Total expenditure', 'Developmental expenditure', 'Non developmental expenditure',
]

summary_stats = df2[financial_columns].describe().T  # .T to transpose the table for readability
summary_stats[['mean', '50%', 'min', 'max', 'std']].rename(columns={'50%': 'median'})

# Group the data by 'srcYear' and calculate mean for each financial column
yearly_trends = df2.groupby('srcYear')[financial_columns].mean()

# Plot the trends for key financial columns
plt.figure(figsize=(12, 8))
for column in financial_columns:
    plt.plot(yearly_trends.index, yearly_trends[column], label=column)

plt.title('Yearly Trends of Financial Expenditures')
plt.xlabel('Year')
plt.ylabel('Expenditure (in units)')
plt.legend()
plt.grid(True)
plt.show()

# 6. Plot Developmental Expenditure over time for different states
# This plot shows the trends in developmental expenditure across states
plt.figure(figsize=(12, 8))
sns.lineplot(data=grouped, x='YearCode', y='Developmental expenditure', hue='srcStateName', marker='o')
plt.title('Developmental Expenditure Over Time by State')
plt.xlabel('Year')
plt.ylabel('Developmental Expenditure')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# 7. Plot Non-Developmental Expenditure over time for different states
# This plot focuses on non-developmental expenditure, tracking trends across states and time
plt.figure(figsize=(12, 8))
sns.lineplot(data=grouped, x='YearCode', y='Non developmental expenditure', hue='srcStateName', marker='o')
plt.title('Non-Developmental Expenditure Over Time by State')
plt.xlabel('Year')
plt.ylabel('Non-Developmental Expenditure')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# 8. Plot Social Services Expenditure over time for different states
# This plot shows how states spend on social services over time
plt.figure(figsize=(12, 8))
sns.lineplot(data=grouped, x='YearCode', y='Social services', hue='srcStateName', marker='o')
plt.title('Social Services Expenditure Over Time by State')
plt.xlabel('Year')
plt.ylabel('Social Services Expenditure')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# 9. Plot Economic Services Expenditure over time for different states
# This plot tracks the expenditure on economic services for various states over time
plt.figure(figsize=(12, 8))
sns.lineplot(data=grouped, x='YearCode', y='Economic services', hue='srcStateName', marker='o')
plt.title('Economic Services Expenditure Over Time by State')
plt.xlabel('Year')
plt.ylabel('Economic Services Expenditure')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

sector = 'Education, sports, art and culture'
sector_data = df2.groupby('srcYear')[sector].sum()
plt.figure(figsize=(10, 6))
sns.lineplot(x=sector_data.index, y=sector_data.values, marker='o')

plt.xlabel('Year')
plt.ylabel(f'Expenditure on {sector} (in units)')
plt.title(f'Expenditure Trends in {sector} Over the Years')
plt.xticks(rotation=45)
plt.tight_layout()

# Show the plot
plt.show()

df2.head()

df_unique = df2.drop_duplicates(subset=['srcStateName', 'stateID'])

# Step 2: Create the 'State-UniqueID' column
df_unique['State-UniqueID'] = df_unique['srcStateName'] + ' - ' + df_unique['stateID'].astype(str)

# Step 3: Print the DataFrame to show only unique state and stateID
print(df_unique[['srcStateName', 'stateID', 'State-UniqueID']])

"""##1. Rajasthan"""

import matplotlib.pyplot as plt

# Filter the data where stateID == 1 (Rajasthan)
df_rajasthan = df2[df2['stateID'] == 1]

# Sort the data by year if necessary
df_rajasthan = df_rajasthan.sort_values(by='srcYear')

# Define colors for different Budget types
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}

# Plotting the time series for Rajasthan with different colors for each budget type
plt.figure(figsize=(10, 6))

for budget_type, color in color_map.items():
    subset = df_rajasthan[df_rajasthan['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)

# Adding labels and title
plt.title('Development Percentage over the Years - Rajasthan', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)

plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

"""##2. Punjab"""

import matplotlib.pyplot as plt

# Filter the data where stateID == 2 (Punjab)
df_punjab = df2[df2['stateID'] == 2]

# Sort the data by year if necessary
df_punjab = df_punjab.sort_values(by='srcYear')

# Define colors for different Budget types
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}

# Plotting the time series for Punjab with different colors for each budget type
plt.figure(figsize=(10, 6))

for budget_type, color in color_map.items():
    subset = df_punjab[df_punjab['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)

# Adding labels and title
plt.title('Development Percentage over the Years - Punjab', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)

plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

"""## 3.Assam"""

import matplotlib.pyplot as plt

# Filter the data where stateID == 3 (Assam)
df_assam = df2[df2['stateID'] == 3]

# Sort the data by year if necessary
df_assam = df_assam.sort_values(by='srcYear')

# Define colors for different Budget types
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}

# Plotting the time series for Assam with different colors for each budget type
plt.figure(figsize=(10, 6))

for budget_type, color in color_map.items():
    subset = df_assam[df_assam['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)

# Adding labels and title
plt.title('Development Percentage over the Years - Assam', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)

plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Filter the data where stateID == 4 (Haryana)
df_haryana = df2[df2['stateID'] == 4]

# Sort the data by year if necessary
df_haryana = df_haryana.sort_values(by='srcYear')

# Define colors for different Budget types
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}

# Plotting the time series for Haryana with different colors for each budget type
plt.figure(figsize=(10, 6))

for budget_type, color in color_map.items():
    subset = df_haryana[df_haryana['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)

# Adding labels and title
plt.title('Development Percentage over the Years - Haryana', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)

plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()



import matplotlib.pyplot as plt

# Filter the data where stateID == 5 (Jharkhand)
df_jharkhand = df2[df2['stateID'] == 5]

# Sort the data by year if necessary
df_jharkhand = df_jharkhand.sort_values(by='srcYear')

# Define colors for different Budget types
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}

# Plotting the time series for Jharkhand with different colors for each budget type
plt.figure(figsize=(10, 6))

for budget_type, color in color_map.items():
    subset = df_jharkhand[df_jharkhand['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)

# Adding labels and title
plt.title('Development Percentage over the Years - Jharkhand', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)

plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_gujarat = df2[df2['stateID'] == 6]
df_gujarat = df_gujarat.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_gujarat[df_gujarat['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Gujarat', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_andhra_pradesh = df2[df2['stateID'] == 7]
df_andhra_pradesh = df_andhra_pradesh.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_andhra_pradesh[df_andhra_pradesh['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Andhra Pradesh', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_karnataka = df2[df2['stateID'] == 8]
df_karnataka = df_karnataka.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_karnataka[df_karnataka['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Karnataka', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_goa = df2[df2['stateID'] == 9]
df_goa = df_goa.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_goa[df_goa['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Goa', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_west_bengal = df2[df2['stateID'] == 10]
df_west_bengal = df_west_bengal.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_west_bengal[df_west_bengal['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - West Bengal', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_uttarakhand = df2[df2['stateID'] == 11]
df_uttarakhand = df_uttarakhand.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_uttarakhand[df_uttarakhand['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Uttarakhand', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_kerala = df2[df2['stateID'] == 12]
df_kerala = df_kerala.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_kerala[df_kerala['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Kerala', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_madhya_pradesh = df2[df2['stateID'] == 13]
df_madhya_pradesh = df_madhya_pradesh.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_madhya_pradesh[df_madhya_pradesh['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Madhya Pradesh', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_uttar_pradesh = df2[df2['stateID'] == 14]
df_uttar_pradesh = df_uttar_pradesh.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_uttar_pradesh[df_uttar_pradesh['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Uttar Pradesh', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_maharashtra = df2[df2['stateID'] == 15]
df_maharashtra = df_maharashtra.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_maharashtra[df_maharashtra['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Maharashtra', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_himachal_pradesh = df2[df2['stateID'] == 16]
df_himachal_pradesh = df_himachal_pradesh.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_himachal_pradesh[df_himachal_pradesh['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Himachal Pradesh', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_manipur = df2[df2['stateID'] == 17]
df_manipur = df_manipur.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_manipur[df_manipur['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Manipur', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_tripura = df2[df2['stateID'] == 18]
df_tripura = df_tripura.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_tripura[df_tripura['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Tripura', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_meghalaya = df2[df2['stateID'] == 19]
df_meghalaya = df_meghalaya.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_meghalaya[df_meghalaya['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Meghalaya', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_chhattisgarh = df2[df2['stateID'] == 20]
df_chhattisgarh = df_chhattisgarh.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_chhattisgarh[df_chhattisgarh['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Chhattisgarh', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_arunachal_pradesh = df2[df2['stateID'] == 21]
df_arunachal_pradesh = df_arunachal_pradesh.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_arunachal_pradesh[df_arunachal_pradesh['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Arunachal Pradesh', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_mizoram = df2[df2['stateID'] == 22]
df_mizoram = df_mizoram.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_mizoram[df_mizoram['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Mizoram', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_tamil_nadu = df2[df2['stateID'] == 23]
df_tamil_nadu = df_tamil_nadu.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_tamil_nadu[df_tamil_nadu['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Tamil Nadu', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_nagaland = df2[df2['stateID'] == 24]
df_nagaland = df_nagaland.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_nagaland[df_nagaland['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Nagaland', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_sikkim = df2[df2['stateID'] == 25]
df_sikkim = df_sikkim.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_sikkim[df_sikkim['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Sikkim', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Filter the data for both 'National Capital Territory of Delhi' and 'Delhi'
df_delhi_combined = df2[(df2['stateID'] == 26) | (df2['stateID'] == 32)]

# Sort the combined data by year
df_delhi_combined = df_delhi_combined.sort_values(by='srcYear')

# Define colors for different Budget types
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}

# Plotting the time series for the combined Delhi data
plt.figure(figsize=(10, 6))

for budget_type, color in color_map.items():
    subset = df_delhi_combined[df_delhi_combined['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)

# Adding labels and title
plt.title('Development Percentage over the Years - Delhi (Combined)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)

# Rotate x-axis labels for better readability
plt.xticks(rotation=45)

# Display the legend
plt.legend(title='Budget Type')

# Display the graph
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Ensure that the year column is treated as a string and sorted correctly
df_delhi_combined['srcYear'] = pd.to_datetime(df_delhi_combined['srcYear'], format='%Y-%y')

# Sort the combined data by year to ensure correct time series plotting
df_delhi_combined = df_delhi_combined.sort_values(by='srcYear')

# Define colors for different Budget types
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}

# Plotting the time series for the combined Delhi data
plt.figure(figsize=(10, 6))

for budget_type, color in color_map.items():
    subset = df_delhi_combined[df_delhi_combined['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)

# Adding labels and title
plt.title('Development Percentage over the Years - Delhi (Combined)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)

# Rotate x-axis labels for better readability
plt.xticks(rotation=45)

# Display the legend
plt.legend(title='Budget Type')

# Display the graph
plt.grid(True)
plt.tight_layout()
plt.show()

df_bihar = df2[df2['stateID'] == 27]
df_bihar = df_bihar.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_bihar[df_bihar['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Bihar', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_odisha = df2[df2['stateID'] == 28]
df_odisha = df_odisha.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_odisha[df_odisha['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Odisha', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_jammu_kashmir = df2[df2['stateID'] == 29]
df_jammu_kashmir = df_jammu_kashmir.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_jammu_kashmir[df_jammu_kashmir['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Jammu and Kashmir', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_puducherry = df2[df2['stateID'] == 30]
df_puducherry = df_puducherry.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_puducherry[df_puducherry['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Puducherry', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_telangana = df2[df2['stateID'] == 31]
df_telangana = df_telangana.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_telangana[df_telangana['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Telangana', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

df_delhi = df2[df2['stateID'] == 32]
df_delhi = df_delhi.sort_values(by='srcYear')
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}
plt.figure(figsize=(10, 6))
for budget_type, color in color_map.items():
    subset = df_delhi[df_delhi['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)
plt.title('Development Percentage over the Years - Delhi', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)
plt.xticks(rotation=45)
plt.legend(title='Budget Type')
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Filter the data where stateID == 13 (Madhya Pradesh)
df_madhya_pradesh = df2[df2['stateID'] == 13]

# Sort the data by year if necessary (depends on your actual data format)
df_madhya_pradesh = df_madhya_pradesh.sort_values(by='srcYear')

# Define colors for different Budget types
color_map = {
    'Budget Estimates': 'red',
    'Revised Estimates': 'yellow',
    'Accounts': 'green'
}

# Plotting the time series for Madhya Pradesh with different colors for each budget type
plt.figure(figsize=(10, 6))

# Loop through each budget type and plot the corresponding data with assigned colors
for budget_type, color in color_map.items():
    subset = df_madhya_pradesh[df_madhya_pradesh['Budget type'] == budget_type]
    plt.plot(subset['srcYear'], subset['development %'], marker='o', linestyle='-', color=color, label=budget_type)

# Adding labels and title
plt.title('Development Percentage over the Years - Madhya Pradesh', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Development %', fontsize=12)

# Rotate x-axis labels for better readability
plt.xticks(rotation=45)

# Display the legend
plt.legend(title='Budget Type')

# Display the graph
plt.grid(True)
plt.tight_layout()
plt.show()

import plotly.io as pio
pio.renderers.default = 'colab'

import plotly.express as px

# Filter the DataFrame for the year 2011
df_2011 = df2[df2['YearCode'] == 2011]

# Create the choropleth map
# Create the choropleth map
fig = px.choropleth(
    df_2011,
    locations="id",  # Use the correct column for state IDs
    geojson=india_states,  # The GeoJSON data
    color="Total expenditure",  # Column representing total expenditure
    hover_name="srcStateName",  # Corrected column name for state/UT
    hover_data=["Total expenditure"],  # Additional data to display on hover
    title="Total Expenditure by State in 2011",  # Title of the map
)

# Update the map settings
fig.update_geos(fitbounds="locations", visible=False)

# Show the plot
fig.show()

import plotly.express as px

# Filter the DataFrame for the year 2011
df_2019 = df2[df2['YearCode'] == 2019]

# Create the choropleth map
# Create the choropleth map
fig = px.choropleth(
    df_2019,
    locations="id",  # Use the correct column for state IDs
    geojson=india_states,  # The GeoJSON data
    color="Total expenditure",  # Column representing total expenditure
    hover_name="srcStateName",  # Corrected column name for state/UT
    hover_data=["Total expenditure"],  # Additional data to display on hover
    title="Total Expenditure by State in 2019",  # Title of the map
)

# Update the map settings
fig.update_geos(fitbounds="locations", visible=False)

# Show the plot
fig.show()

import pandas as pd

# Set the option to display all columns
pd.set_option('display.max_columns', None)

# Set the option to display all rows (if needed)
pd.set_option('display.max_rows', None)

# Now, when you display the head of the dataframe, it will show all columns
df2.head()

# Check the shape of the dataset
df2.shape

# Get summary information about the dataset (column names, data types, non-null values)
df2.info()

# Display basic statistics for numerical columns
df2.describe()

# Check for missing values
df2.isnull().sum()

# Check for duplicate rows
df2.duplicated().sum()

# Check unique values in categorical columns
df2['srcStateName'].unique()
df['Budget type'].unique()

# Plot distribution of 'Total expenditure' and other important columns
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
sns.histplot(df['Total expenditure'], kde=True)
plt.title('Distribution of Total Expenditure')
plt.show()

# Plot correlation heatmap for numerical columns
plt.figure(figsize=(15, 10))
sns.heatmap(df2.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Bar plot for 'Budget type' column
sns.countplot(data=df2, x='Budget type')
plt.title('Distribution of Budget Type')
plt.show()

# Bar plot for 'srcStateName' column (Top 10 states with most records)
top_states = df2['srcStateName'].value_counts().head(10)
top_states.plot(kind='bar', figsize=(10, 6))
plt.title('Top 10 States with Most Records')
plt.show()

# Convert 'srcYear' to a string (since it has both numerical and character values)
df2['srcYear'] = df2['srcYear'].astype(str)

# Convert 'YearCode' to integer if needed
df2['YearCode'] = pd.to_numeric(df2['YearCode'], errors='coerce')

# Convert all other relevant columns to appropriate data types
df2['Total expenditure'] = pd.to_numeric(df2['Total expenditure'], errors='coerce')
df2['Developmental expenditure'] = pd.to_numeric(df2['Developmental expenditure'], errors='coerce')

# Repeat similar conversion for other numerical columns as needed

# Convert 'srcYear' to a string (since it has both numerical and character values)
df2['srcYear'] = df2['srcYear'].astype(str)

# Convert 'YearCode' to integer if needed
df2['YearCode'] = pd.to_numeric(df2['YearCode'], errors='coerce')

# Convert all other relevant columns to appropriate data types
df2['Total expenditure'] = pd.to_numeric(df2['Total expenditure'], errors='coerce')
df2['Developmental expenditure'] = pd.to_numeric(df2['Developmental expenditure'], errors='coerce')

# Repeat similar conversion for other numerical columns as needed

df.head()

df.shape

df.isnull().sum()

rows_missing_values = df[df.isnull().any(axis=1)]
df_cleaned = df.dropna()

df_cleaned.head()

df_cleaned.shape

df_cleaned.isnull().sum()

distinct_years = df['Year'].unique()
print("Distinct Years:", distinct_years)

rows_missing_values.shape

!pip install autoviz

from autoviz.AutoViz_Class import AutoViz_Class
AV= AutoViz_Class()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
filename = "/content/drive/MyDrive/NDAP_REPORT_7567.csv"

df= AV.AutoViz(
    filename
)



