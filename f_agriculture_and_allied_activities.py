# -*- coding: utf-8 -*-
"""F Agriculture and Allied Activities.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-J9kDrOUrEJ47wwz6kvA7qOJiaaYK1Oc
"""

# Install geopandas if you haven't already
!pip install geopandas
import geopandas as gpd
from google.colab import drive

import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import json
import plotly.express as px

drive.mount('/content/drive')

import plotly.io as pio
pio.renderers.default = 'browser'

# File path to the dataset on Google Drive
file_path = '/content/drive/MyDrive/Revenue Expenditure.csv'

# Load the dataset
try:
    df2 = pd.read_csv(file_path)
    print("File loaded successfully.")
except Exception as e:
    print(f"An error occurred: {e}")

file_path = '/content/drive/MyDrive/Tax Collection.csv'
try:

    df = pd.read_csv(file_path)
    print("File loaded successfully.")
except Exception as e:
    print(f"An error occurred: {e}")

pd.set_option('display.max_columns', None)

df.head()

df.columns = df.columns.str.strip()

df.columns

df['Agriculture and allined activities'] = df[['Crop husbandry', 'Animal husbandry', 'Fisheries',
                                              'Forestry and wildlife', 'Plantations', 'Co-operation']].sum(axis=1, skipna=True)

df.head()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Filter rows where Budget type is 'Accounts'
df_agriculture = df[df['Budget type'] == 'Accounts']

# Check if the dataset contains agriculture-related columns
if 'Agriculture and allined activities' in df_agriculture.columns:
    # Extract year and agriculture data
    df_agriculture['Year'] = pd.to_datetime(df_agriculture['Year'], format='%Y').dt.year
    df_agriculture = df_agriculture.sort_values(by='Year')

    # 1. Time Series Plot: Agriculture over the years
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=df_agriculture, x='Year', y='Agriculture and allined activities', marker='o', label='Agriculture Expenditure')
    plt.title('Trend of Agriculture Expenditure Over the Years')
    plt.xlabel('Year')
    plt.ylabel('Agriculture Expenditure')
    plt.grid(True)
    plt.legend()
    plt.show()

    # 2. Bar Plot: Agriculture Expenditure by State
    plt.figure(figsize=(12, 6))
    sns.barplot(data=df_agriculture, x='srcStateName', y='Agriculture and allined activities', ci=None)
    plt.title('Agriculture Expenditure by State (Accounts)')
    plt.xticks(rotation=45, ha='right')
    plt.xlabel('State')
    plt.ylabel('Agriculture Expenditure')
    plt.tight_layout()
    plt.show()

    # 3. Time Series Plot: Compare Total Revenue and Agriculture Expenditure
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=df_agriculture, x='Year', y='Agriculture and allined activities', marker='o', label='Agriculture Expenditure')
    sns.lineplot(data=df_agriculture, x='Year', y='Total revenue', marker='o', label='Total Revenue')
    plt.title('Comparison: Agriculture Expenditure vs Total Revenue')
    plt.xlabel('Year')
    plt.ylabel('Expenditure')
    plt.grid(True)
    plt.legend()
    plt.show()

    # 4. Box Plot: Distribution of Agriculture Expenditure by State
    plt.figure(figsize=(12, 6))
    sns.boxplot(data=df_agriculture, x='srcStateName', y='Agriculture and allined activities')
    plt.title('Distribution of Agriculture Expenditure by State')
    plt.xticks(rotation=45, ha='right')
    plt.xlabel('State')
    plt.ylabel('Agriculture Expenditure')
    plt.tight_layout()
    plt.show()

    # 5. Pie Chart: Share of Agriculture Expenditure by State
    plt.figure(figsize=(8, 8))
    statewise_agri = df_agriculture.groupby('srcStateName')['Agriculture and allined activities'].sum()
    statewise_agri.plot(kind='pie', autopct='%1.1f%%', startangle=140)
    plt.title('Share of Agriculture Expenditure by State')
    plt.ylabel('')
    plt.tight_layout()
    plt.show()
else:
    print("The column 'Agriculture and allined activities' is not present in the dataset.")

# Strip any leading or trailing spaces from column names in df2
df2.columns = df2.columns.str.strip()

# Create a new column 'Agriculture and allied activities' by summing the specified columns and handling NaNs
df2['Agriculture and allined activities'] = df2[['Crop husbandry', 'Animal husbandry', 'Fisheries',
                                                'Forestry and wild life', 'Plantations', 'Cooperation']].sum(axis=1, skipna=True)

# Display the result to verify
print(df2[['Crop husbandry', 'Animal husbandry', 'Fisheries', 'Forestry and wild life', 'Plantations', 'Cooperation', 'Agriculture and allied activities']].head())

df2.head()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df2 is your dataset already loaded
# Filter for Budget type == 'Accounts'
df_accounts = df2[df2['Budget type'] == 'Accounts']

# Select relevant columns for plotting
sectors = [
   'Developmental expenditure', 'Social services',
    'Education, sports, art and culture', 'Medical and public health',
    'Economic services', 'Agriculture and allied activities'
]

# Melt the DataFrame for easier plotting
melted_df = df_accounts.melt(
    id_vars=['srcStateName', 'srcYear'],
    value_vars=sectors,
    var_name='Sector',
    value_name='Expenditure'
)

# Convert years to numeric for proper ordering
melted_df['srcYear'] = pd.to_numeric(melted_df['srcYear'].str[:4])

# Plot expenditures over the years for various sectors
plt.figure(figsize=(16, 10))
sns.lineplot(
    data=melted_df,
    x='srcYear',
    y='Expenditure',
    hue='Sector',
    ci=None,
    marker='o'
)
plt.title('Expenditure on Various Sectors Over the Years (States Combined)', fontsize=16)
plt.xlabel('Year', fontsize=14)
plt.ylabel('Expenditure (in units)', fontsize=14)
plt.legend(title='Sectors', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

print(df2.columns)

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df and df2 are your dataframes

# Filter for year 2017 and budget type "Accounts" for both dataframes
df_filtered = df[(df['srcYear'] == '2017-18') & (df['Budget type'] == 'Accounts')]
df2_filtered = df2[(df2['srcYear'] == '2017-18') & (df2['Budget type'] == 'Accounts')]

# Extract 'Agriculture and allied activities' for both dataframes
df_agriculture = df_filtered['Agriculture and allined activities']
df2_agriculture = df2_filtered['Agriculture and allined activities']

# Plot the data
plt.figure(figsize=(10, 6))

# Plot for the first dataset (df)
plt.plot(df_filtered['srcStateName'], df_agriculture, label='df -Tax collection on Agriculture and allied activities', marker='o')

# Plot for the second dataset (df2)
plt.plot(df2_filtered['srcStateName'], df2_agriculture, label='df2 -Expenditure on Agriculture and allied activities', marker='x')

# Set plot labels and title
plt.xlabel('State')
plt.ylabel('Agriculture and Allied Activities')
plt.title('Agriculture and Allied Activities (2017) for Budget Type Accounts')

# Rotate x-axis labels for better readability
plt.xticks(rotation=90)

# Show legend
plt.legend()

# Display the plot
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df and df2 are your dataframes

# Filter for budget type "Accounts" for both dataframes
df_filtered = df[df['Budget type'] == 'Accounts']
df2_filtered = df2[df2['Budget type'] == 'Accounts']

# Extract 'Agriculture and allied activities' for tax revenue from df (assuming it represents tax collection)
df_agriculture_tax = df_filtered['Agriculture and allined activities']

# Extract 'Agriculture and allied activities' for expenditure from df2 (assuming it represents expenditure)
df2_agriculture_expenditure = df2_filtered['Agriculture and allined activities']

# Extract year information from both dataframes
df_years = df_filtered['srcYear']
df2_years = df2_filtered['srcYear']

# Plot the data
plt.figure(figsize=(12, 8))

# Plot for tax collection (df)
plt.plot(df_years, df_agriculture_tax, label='Tax Collection on Agriculture and Allied Activities', marker='o', linestyle='-', color='blue')

# Plot for expenditure (df2)
plt.plot(df2_years, df2_agriculture_expenditure, label='Expenditure on Agriculture and Allied Activities', marker='x', linestyle='--', color='green')

# Set plot labels and title
plt.xlabel('Year')
plt.ylabel('Agriculture and Allied Activities')
plt.title('Agriculture and Allied Activities: Tax Collection vs Expenditure Over the Years')

# Rotate x-axis labels for better readability
plt.xticks(rotation=90)

# Show legend
plt.legend()

# Display the plot
plt.tight_layout()
plt.show()

# Calculate the total expenditure on Agriculture and Allied Activities
total_expenditure = df2_filtered['Agriculture and allined activities'].sum()

# Calculate the total tax collection from Agriculture and Allied Activities
total_tax_collection = df_agriculture_tax.sum()

# Print the results
print(f"Total Expenditure on Agriculture and Allied Activities: {total_expenditure}")
print(f"Total Tax Collection from Agriculture and Allied Activities: {total_tax_collection}")

import matplotlib.pyplot as plt

# Calculate the total expenditure on Agriculture and Allied Activities
total_expenditure = df2_filtered['Agriculture and allined activities'].sum()

# Calculate the total tax collection from Agriculture and Allied Activities
total_tax_collection = df_agriculture_tax.sum()

# Create a bar plot
plt.figure(figsize=(8, 6))
categories = ['Total Expenditure', 'Total Tax Collection']
values = [total_expenditure, total_tax_collection]

plt.bar(categories, values, color=['green', 'blue'])

# Adding labels and title
plt.xlabel('Category')
plt.ylabel('Amount')
plt.title('Total Expenditure vs Tax Collection on Agriculture and Allied Activities')

# Display the plot
plt.tight_layout()
plt.show()

# Group by year and sum the values for 'Agriculture and Allied Activities' in both dataframes
yearly_expenditure = df2_filtered.groupby('srcYear')['Agriculture and allined activities'].sum()
yearly_tax_collection = df_filtered.groupby('srcYear')['Agriculture and allined activities'].sum()

# Plot the data
plt.figure(figsize=(12, 8))

# Plot for tax collection
plt.plot(yearly_tax_collection.index, yearly_tax_collection.values, label='Tax Collection on Agriculture and Allied Activities', marker='o', linestyle='-', color='blue')

# Plot for expenditure
plt.plot(yearly_expenditure.index, yearly_expenditure.values, label='Expenditure on Agriculture and Allied Activities', marker='x', linestyle='--', color='green')

# Set plot labels and title
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Agriculture and Allied Activities: Tax Collection vs Expenditure Over the Years')

# Rotate x-axis labels for better readability
plt.xticks(rotation=90)

# Show legend
plt.legend()

# Display the plot
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming your data is in a DataFrame called df

# Step 1: Handling Missing Values
# Fill missing values with 0 for simplicity in financial context (alternatively, drop rows with NaN for specific columns)
df.fillna(0, inplace=True)

# Step 2: Trend Analysis for Agriculture and Allied Activities
# Group by year and sum the values for agriculture-related fields
agriculture_trends = df.groupby('Year')['Agriculture and allined activities'].sum()

# Plotting the trend of Agriculture and Allied Activities over the years
plt.figure(figsize=(12, 6))
plt.plot(agriculture_trends.index, agriculture_trends.values, marker='o', color='green', label='Agriculture and Allied Activities')
plt.title('Trend of Agriculture and Allied Activities Over the Years')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.legend()
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Step 3: Distribution Analysis of Agriculture-Related Fields
plt.figure(figsize=(10, 6))
sns.histplot(df['Agriculture and allined activities'], kde=True, color='green', bins=15)
plt.title('Distribution of Agriculture and Allied Activities')
plt.xlabel('Amount')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Step 4: Correlation Analysis for Agriculture-related insights
# Select relevant agriculture-related columns for correlation
agriculture_related_cols = ['Agriculture and allined activities', 'Crop husbandry', 'Animal husbandry', 'Fisheries', 'Forestry and wildlife', 'Co-operation']
df_agriculture = df[agriculture_related_cols]

# Plot a heatmap to show correlations between agriculture-related fields
plt.figure(figsize=(10, 8))
sns.heatmap(df_agriculture.corr(), annot=True, cmap='YlGnBu')
plt.title('Correlation Matrix for Agriculture-Related Activities')
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assume df2 is already loaded with your data.

# Selecting only the fields relevant to government expenditure
# (Modify field names if they differ in the actual dataset)
expenditure_fields = [
    'Total expenditure', 'Developmental expenditure', 'Social services',
    'Education, sports, art and culture', 'Medical and public health',
    'Family welfare', 'Water supply and sanitation', 'Housing',
    'Urban development', 'Economic services', 'Agriculture and allied activities'
]

# Filter out only the expenditure-related columns
df_expenditure = df2[expenditure_fields]

# Drop rows with NaN values in the expenditure-related fields
df_expenditure_cleaned = df_expenditure.dropna()

# Generate correlation matrix
correlation_matrix = df_expenditure_cleaned.corr()

# Plotting the correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f", cbar=True)
plt.title("Correlation Matrix of Government Expenditure Fields")
plt.show()

# Bar plot for average expenditure in different sectors
avg_expenditure = df_expenditure_cleaned.mean().sort_values(ascending=False)

plt.figure(figsize=(14, 8))
sns.barplot(x=avg_expenditure.values, y=avg_expenditure.index, palette="viridis")
plt.xlabel("Average Expenditure (in units)")
plt.ylabel("Expenditure Fields")
plt.title("Average Government Expenditure on Various Fields")
plt.show()

# Filter data for 2016-2018 and Budget type == 'Accounts'
filtered_df = df[(df['srcYear'].str.contains('2016|2017|2018')) & (df['Budget type'] == 'Accounts')]

# Aggregate data by state for the required fields
agg_data = filtered_df.groupby('srcStateName')[['Agriculture and allined activities']].sum().reset_index()

# Plot tax collection vs expenditure for Agriculture and Allied Activities
plt.figure(figsize=(12, 6))
sns.lineplot(data=agg_data, x='srcStateName', y='Agriculture and allined activities', marker='o', label='Expenditure on Agriculture and Allied Activities')
plt.title('Agriculture and Allined Activities (2016-2018) for Budget Type Accounts')
plt.xticks(rotation=90)
plt.ylabel('Agriculture and Allied Activities')
plt.xlabel('State')
plt.legend()
plt.tight_layout()
plt.show()

# Average expenditure on various fields for 2016-2018
fields = [
    'Total expenditure', 'Developmental expenditure', 'Social services',
    'Education, sports, art and culture', 'Medical and public health',
    'Family welfare', 'Water supply and sanitation', 'Housing',
    'Urban development', 'Economic services', 'Agriculture and allied activities'
]

average_expenditure = filtered_df[fields].mean().sort_values(ascending=False)

# Bar plot for average expenditure
plt.figure(figsize=(14, 8))
sns.barplot(x=average_expenditure.values, y=average_expenditure.index, palette="viridis")
plt.xlabel("Average Expenditure (in units)")
plt.ylabel("Expenditure Fields")
plt.title("Average Government Expenditure on Various Fields (2016-2018)")
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assume df2 is already loaded with your data.

# List of all relevant fields for the correlation matrix
expenditure_fields = [
    'Total expenditure', 'Developmental expenditure', 'Social services',
    'Education, sports, art and culture', 'Medical and public health',
    'Family welfare', 'Water supply and sanitation', 'Housing',
    'Urban development', 'Welfare of scheduled caste, scheduled tribes and other backward classes',
    'Labour and labour welfare', 'Social security and welfare', 'Nutrition',
    'Relief on account of natural calamities', 'Other social services',
    'Economic services', 'Agriculture and allied activities', 'Crop husbandry',
    'Soil and water conservation', 'Animal husbandry', 'Dairy development',
    'Fisheries', 'Forestry and wild life', 'Plantations', 'Food storage and Warehousing',
    'Agricultural research and education', 'Agricultural finance institutions',
    'Cooperation', 'Other agricultural programmes', 'Rural development',
    'Special area programmes', 'Irrigation and flood control',
    'Major and medium irrigation', 'Minor irrigation', 'Flood control and drainage',
    'Energy', 'Power', 'Industry and minerals', 'Village and small industries',
    'Industries', 'Other industries', 'Transport and communications',
    'Roads and bridges', 'Others means of transport and communications',
    'Science, technology and environment', 'General economic services',
    'Secretariat services', 'Tourism', 'Civil supplies', 'Others general economic services',
    'Non developmental expenditure', 'Organs of state', 'Fiscal services',
    'Collection of taxes and duties', 'Other fiscal services',
    'Interest payments and services of debt', 'Appropriation for reduction or avoidance of debt',
    'Interest payments', 'Interest on loans from the centre', 'Interest on internal debt',
    'Interest on market loans', 'Interest on National Food Security Food ( NSSF )',
    'Interest on small savings, provident funds, etc', 'Other interests on internal debt',
    'Administrative services', 'Secretariat services.1', 'District administration',
    'Police', 'Public works', 'Other administrative services', 'Pensions',
    'Miscellaneous general services', 'Payment on account of state lotteries',
    'Grants-in-aid and contributions', 'Compensation and assignments to local bodies and Panchayati Raj Institutions',
    'Transfers to road fund, education cess fund, etc', 'Reserve with finance department',
    'YearCode', 'Year', 'Agriculture and allined activities'
]

# Filter only the selected fields from df2
df_expenditure = df2[expenditure_fields]

# Set a threshold for non-null values (e.g., keep columns with at least 80% non-null values)
threshold = 0.8
filtered_columns = df_expenditure.columns[df_expenditure.notna().mean() > threshold]
df_expenditure_filtered = df_expenditure[filtered_columns]

# Drop rows with NaN values in the selected fields
df_expenditure_cleaned = df_expenditure_filtered.dropna()

# Select only numeric columns for the correlation matrix
df_expenditure_numeric = df_expenditure_cleaned.select_dtypes(include=[float, int])

# Generate the correlation matrix
correlation_matrix = df_expenditure_numeric.corr()

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(20, 16))
sns.heatmap(correlation_matrix, annot=False, cmap="coolwarm", cbar=True)
plt.title("Correlation Matrix of Government Expenditure Fields (Filtered for Missing and Non-Numeric Values)")
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assume df is already loaded with your data.

# List of all relevant fields for the correlation matrix
revenue_fields = [
    'Total revenue', 'Tax revenue', 'State own tax revenue', 'Taxes on income',
    'Agricultural income', 'Taxes on professions, trades, callings and employment',
    'Taxes on property and capital transactions', 'Land revenue', 'Stamps and registration fees',
    'Urban immovable property tax', 'Taxes on commodities and services', 'Sales tax',
    'State sales tax or Value added tax (VAT)', 'Central sales tax', 'Surcharge on sales tax',
    'Receipts of turnover tax', 'Other receipts of sales tax', 'State excise', 'Taxes on vehicles',
    'Taxes on goods and passengers', 'Taxes and duties on electricity', 'Entertainment tax',
    'Other taxes and duties', 'Share in central taxes', 'Corporation tax', 'Income tax',
    'Estate duty', 'Other taxes on income and expenditure', 'Taxes on wealth', 'Customs',
    'Union excise duties', 'Service tax', 'Other taxes and duties on commodities',
    'Non-tax revenue', 'State own non-tax revenue', 'Interest receipts', 'Dividends and profits',
    'General services', 'State lotteries', 'Social services', 'Education, sports, art and culture',
    'Medical and public health', 'Family welfare', 'Housing', 'Urban development',
    'Labour and employment', 'Social security and welfare', 'Water supply and sanitation',
    'Other social services taxes', 'Fiscal services', 'Economic services', 'Crop husbandry',
    'Animal husbandry', 'Fisheries', 'Forestry and wildlife', 'Plantations', 'Co-operation',
    'Other agricultural programmes', 'Major and medium irrigation projects', 'Minor irrigation',
    'Power', 'Petroleum', 'Village and small industries', 'Industries', 'Ports and light houses',
    'Road transport', 'Tourism', 'Other economic sevices taxes', 'Grants from the centre',
    'State plan schemes', 'Advance release of plan assistance for natural calamities',
    'Central plan schemes', 'Centrally sponsored schemes', 'North eastern council (NEC) / Special plan scheme',
    'Non-plan grants', 'Statutory grants', 'Grants for relief on account of natural calamities',
    'Other non-plan grants', 'State Goods and Services Tax (SGST)', 'Central Goods and Services Tax (CGST)',
    'Integrated Goods and Services Tax (IGST)', 'Sales tax on motor spirit and lubricants',
    'Medical, public health and family welfare', 'Goods and Services Tax (GST) compensation',
    'Value Added Tax (VAT) compensation', 'Central sales tax compensation',
    'Compensation cess (code:0009)', 'YearCode', 'Year', 'Agriculture and allined activities'
]

# Filter only the selected fields from df
df_revenue = df[revenue_fields]

# Set a threshold for non-null values (e.g., keep columns with at least 80% non-null values)
threshold = 0.8
filtered_columns = df_revenue.columns[df_revenue.notna().mean() > threshold]
df_revenue_filtered = df_revenue[filtered_columns]

# Drop rows with NaN values in the selected fields
df_revenue_cleaned = df_revenue_filtered.dropna()

# Select only numeric columns for the correlation matrix
df_revenue_numeric = df_revenue_cleaned.select_dtypes(include=[float, int])

# Generate the correlation matrix
correlation_matrix = df_revenue_numeric.corr()

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(20, 16))
sns.heatmap(correlation_matrix, annot=False, cmap="coolwarm", cbar=True)
plt.title("Correlation Matrix of Government Revenue and Expenditure Fields (Filtered for Missing and Non-Numeric Values)")
plt.show()
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assume df is already loaded with your data.

# List of all relevant fields for the correlation matrix
revenue_fields = [
    'Total revenue', 'Tax revenue', 'State own tax revenue', 'Taxes on income',
    'Agricultural income', 'Taxes on professions, trades, callings and employment',
    'Taxes on property and capital transactions', 'Land revenue', 'Stamps and registration fees',
    'Urban immovable property tax', 'Taxes on commodities and services', 'Sales tax',
    'State sales tax or Value added tax (VAT)', 'Central sales tax', 'Surcharge on sales tax',
    'Receipts of turnover tax', 'Other receipts of sales tax', 'State excise', 'Taxes on vehicles',
    'Taxes on goods and passengers', 'Taxes and duties on electricity', 'Entertainment tax',
    'Other taxes and duties', 'Share in central taxes', 'Corporation tax', 'Income tax',
    'Estate duty', 'Other taxes on income and expenditure', 'Taxes on wealth', 'Customs',
    'Union excise duties', 'Service tax', 'Other taxes and duties on commodities',
    'Non-tax revenue', 'State own non-tax revenue', 'Interest receipts', 'Dividends and profits',
    'General services', 'State lotteries', 'Social services', 'Education, sports, art and culture',
    'Medical and public health', 'Family welfare', 'Housing', 'Urban development',
    'Labour and employment', 'Social security and welfare', 'Water supply and sanitation',
    'Other social services taxes', 'Fiscal services', 'Economic services', 'Crop husbandry',
    'Animal husbandry', 'Fisheries', 'Forestry and wildlife', 'Plantations', 'Co-operation',
    'Other agricultural programmes', 'Major and medium irrigation projects', 'Minor irrigation',
    'Power', 'Petroleum', 'Village and small industries', 'Industries', 'Ports and light houses',
    'Road transport', 'Tourism', 'Other economic sevices taxes', 'Grants from the centre',
    'State plan schemes', 'Advance release of plan assistance for natural calamities',
    'Central plan schemes', 'Centrally sponsored schemes', 'North eastern council (NEC) / Special plan scheme',
    'Non-plan grants', 'Statutory grants', 'Grants for relief on account of natural calamities',
    'Other non-plan grants', 'State Goods and Services Tax (SGST)', 'Central Goods and Services Tax (CGST)',
    'Integrated Goods and Services Tax (IGST)', 'Sales tax on motor spirit and lubricants',
    'Medical, public health and family welfare', 'Goods and Services Tax (GST) compensation',
    'Value Added Tax (VAT) compensation', 'Central sales tax compensation',
    'Compensation cess (code:0009)', 'YearCode', 'Year', 'Agriculture and allined activities'
]

# Filter only the selected fields from df
df_revenue = df[revenue_fields]

# Set a threshold for non-null values (e.g., keep columns with at least 80% non-null values)
threshold = 0.8
filtered_columns = df_revenue.columns[df_revenue.notna().mean() > threshold]
df_revenue_filtered = df_revenue[filtered_columns]

# Drop rows with NaN values in the selected fields
df_revenue_cleaned = df_revenue_filtered.dropna()

# Select only numeric columns for the correlation matrix
df_revenue_numeric = df_revenue_cleaned.select_dtypes(include=[float, int])

# Generate the correlation matrix
correlation_matrix = df_revenue_numeric.corr()

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(20, 16))
sns.heatmap(correlation_matrix, annot=False, cmap="coolwarm", cbar=True)
plt.title("Correlation Matrix of Government Revenue and Expenditure Fields (Filtered for Missing and Non-Numeric Values)")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load your dataset
# Assuming df is your DataFrame

# 1. Total Revenue vs. Tax Revenue Breakdown
plt.figure(figsize=(10, 6))
df['Revenue Type'] = 'Non-Tax'
df.loc[df['Tax revenue'] > 0, 'Revenue Type'] = 'Tax'
revenue_data = df.groupby('Revenue Type')['Total revenue'].sum().reset_index()
sns.barplot(x='Revenue Type', y='Total revenue', data=revenue_data, palette='pastel')
plt.title('Total Revenue Breakdown: Tax vs Non-Tax')
plt.ylabel('Revenue (in billions)')
plt.xlabel('Revenue Type')
plt.show()

# 2. Tax Revenue Composition by Category
tax_categories = ['Taxes on income', 'Taxes on property and capital transactions', 'Taxes on commodities and services', 'State excise']
tax_revenue = df[tax_categories].sum().reset_index()
tax_revenue.columns = ['Tax Category', 'Revenue']
plt.figure(figsize=(12, 6))
sns.barplot(x='Tax Category', y='Revenue', data=tax_revenue, palette='pastel')
plt.title('Tax Revenue Composition by Category')
plt.ylabel('Revenue (in billions)')
plt.xticks(rotation=45)
plt.show()

# 3. Trends Over Time: Total Revenue, Tax Revenue
plt.figure(figsize=(14, 6))
sns.lineplot(x='Year', y='Total revenue', data=df, label='Total Revenue', marker='o')
sns.lineplot(x='Year', y='Tax revenue', data=df, label='Tax Revenue', marker='o')
plt.title('Trends in Total and Tax Revenue Over Time')
plt.ylabel('Revenue (in billions)')
plt.xlabel('Year')
plt.legend()
plt.show()

# 4. GST Revenue Comparison (SGST, CGST, IGST)
gst_columns = ['State Goods and Services Tax (SGST)', 'Central Goods and Services Tax (CGST)', 'Integrated Goods and Services Tax (IGST)']
gst_data = df[gst_columns].sum().reset_index()
gst_data.columns = ['GST Type', 'Revenue']
plt.figure(figsize=(10, 6))
sns.barplot(x='GST Type', y='Revenue', data=gst_data, palette='pastel')
plt.title('Revenue from GST by Type')
plt.ylabel('Revenue (in billions)')
plt.xlabel('GST Type')
plt.show()

# 5. Breakdown of Expenditure on Social and Economic Services
social_economic_categories = ['Social services', 'Economic services']
expenditure_data = df[social_economic_categories].sum().reset_index()
expenditure_data.columns = ['Service Type', 'Expenditure']
plt.figure(figsize=(10, 6))
sns.barplot(x='Service Type', y='Expenditure', data=expenditure_data, palette='pastel')
plt.title('Expenditure on Social and Economic Services')
plt.ylabel('Expenditure (in billions)')
plt.xlabel('Service Type')
plt.show()

# 6. State Own Tax Revenue Comparison Across States
plt.figure(figsize=(12, 8))
sns.boxplot(x='srcStateName', y='State own tax revenue', data=df, palette='pastel')
plt.title('State Own Tax Revenue Comparison Across States')
plt.ylabel('State Own Tax Revenue')
plt.xlabel('State')
plt.xticks(rotation=90)
plt.show()

# 7. Revenue from Social and Economic Activities (e.g., Tourism, Education, Agriculture)
revenue_categories = ['Education, sports, art and culture', 'Tourism', 'Crop husbandry', 'Animal husbandry']
revenue_breakdown = df[revenue_categories].sum().reset_index()
revenue_breakdown.columns = ['Category', 'Revenue']
plt.figure(figsize=(12, 6))
sns.barplot(x='Category', y='Revenue', data=revenue_breakdown, palette='pastel')
plt.title('Revenue from Various Social and Economic Activities')
plt.ylabel('Revenue (in billions)')
plt.xlabel('Category')
plt.xticks(rotation=45)
plt.show()

